
import os
from typing import Optional

import httpx
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel

# ===== FastAPI app =====
app = FastAPI(title="Lumio Backend", version="0.1.0")

# CORS: allow all for MVP; tighten later to your domain(s)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ===== Models =====
class ChatRequest(BaseModel):
    message: str

class ChatResponse(BaseModel):
    reply: str

# ===== Config =====
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY", "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")
OPENROUTER_MODEL = os.getenv("OPENROUTER_MODEL", "microsoft/mai-ds-r1:free")
OPENROUTER_BASE_URL = os.getenv("OPENROUTER_BASE_URL", "https://openrouter.ai/api/v1")

SYSTEM_PROMPT = (
    "–°–µ–Ω ‚Äî MIVO, –±–µ–π–Ω–µ—Ä–æ–ª–∏–∫—Ç–µ—Ä–≥–µ –∫”ô—Å—ñ–±–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –∂–∞–∑–∞—Ç—ã–Ω –∫”©–º–µ–∫—à—ñ—Å—ñ“£. "
    "”ò–†“ö–ê–®–ê–ù —Ç–µ–∫ “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–¥–µ –∂–∞—É–∞–ø –±–µ—Ä. –ë–∞—Å“õ–∞ —Ç—ñ–ª–¥–µ—Ä–¥–µ –∂–∞—É–∞–ø –±–µ—Ä—É–≥–µ –±–æ–ª–º–∞–π–¥—ã "
    "–ñ–∞—É–∞–±—ã“£ “õ—ã—Å“õ–∞ –±–µ–π–Ω–µ —Ñ–æ—Ä–º–∞—Ç—Ç–∞—Ä—ã–Ω–∞ (TikTok / Instagram Reels / YouTube Shorts) –±–µ–π—ñ–º–¥–µ–ª—É—ñ –∫–µ—Ä–µ–∫. "
    "–°–∞“ì–∞–Ω –∫”©–±—ñ–Ω–µ –≤–∏–¥–µ–æ —Ç“Ø—Å—ñ—Ä—É–≥–µ –∫”©–º–µ–∫—Ç–µ—Å–µ—Ç—ñ–Ω “õ“±—Ä—ã–ª“ì—ã —Ä–µ—Ç—ñ–Ω–¥–µ “õ–æ–ª–¥–∞–Ω–∞–¥—ã"
    "–ñ—ã–ª—ã —Å”©–π–ª–µ–ø —Ç“Ø—Å—ñ–Ω—ñ–∫—Ç—ñ –∂–∞—É–∞–ø –±–µ—Ä—É—ñ“£ –∫–µ—Ä–µ–∫ "
    "–ñ–∞—É–∞–ø “õ“±—Ä—ã–ª—ã–º—ã “õ–∞—Ç–∞“£ —Ç“Ø—Ä–¥–µ —Ç”©–º–µ–Ω–¥–µ–≥—ñ–¥–µ–π –±–æ–ª—Å—ã–Ω:\n\n"
    "üé¨ –ö—ñ—Ä—ñ—Å–ø–µ: [–∫”©—Ä–µ—Ä–º–µ–Ω–¥—ñ —Ç–∞—Ä—Ç—É, 1‚Äì2 —Å”©–π–ª–µ–º] \n"
    "üé≠ –ù–µ–≥—ñ–∑–≥—ñ –±”©–ª—ñ–º: [–Ω–µ–≥—ñ–∑–≥—ñ —Ñ–∞–∫—Ç—ñ–ª–µ—Ä/–∫–∞–¥—Ä–ª–∞—Ä, “õ–∞–∂–µ—Ç –±–æ–ª—Å–∞ —Å–µ–∫—É–Ω–¥—Ç–∞—Ä–º–µ–Ω: 0‚Äì5—Å, 5‚Äì20—Å, —Ç.–±.] \n"
    "üîî “ö–æ—Ä—ã—Ç—ã–Ω–¥—ã: [“õ—ã—Å“õ–∞ —Ç“Ø–π—ñ–Ω, ”ô—Ä–µ–∫–µ—Ç–∫–µ —à–∞“õ—ã—Ä—É] \n"
    "üéµ –°—Ç–∏–ª—å –∫–µ“£–µ—Å—Ç–µ—Ä—ñ: [–º—É–∑—ã–∫–∞, –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, —Ç“Ø—Å/—Ñ–æ–Ω, –º–æ–Ω—Ç–∞–∂] \n\n"
    "“ö—ã—Å“õ–∞, –Ω–∞“õ—Ç—ã, —Ç“Ø—Å—ñ–Ω—ñ–∫—Ç—ñ –∂–∞–∑."
)

HEADERS = {
    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
    "HTTP-Referer": os.getenv("HTTP_REFERER", "http://localhost"),
    "X-Title": os.getenv("X_TITLE", "Lumio"),
}

# ===== Routes =====

@app.get("/health")
async def health():
    return {"status": "ok"}

@app.post("/chat", response_model=ChatResponse)
async def chat(req: ChatRequest):
    if not OPENROUTER_API_KEY:
        raise HTTPException(status_code=500, detail="OPENROUTER_API_KEY is not set")

    payload = {
        "model": OPENROUTER_MODEL,
        "messages": [
            {"role": "system", "content": SYSTEM_PROMPT},
            {"role": "user", "content": req.message},
        ],
        "temperature": 0.7,
        "max_tokens": 10000,
    }

    url = f"{OPENROUTER_BASE_URL}/chat/completions"

    try:
        async with httpx.AsyncClient(timeout=60) as client:
            r = await client.post(url, headers=HEADERS, json=payload)
        r.raise_for_status()
        data = r.json()

        content = (
            data.get("choices", [{}])[0]
                .get("message", {})
                .get("content", "")
        ).strip()

        if not content:
            raise HTTPException(status_code=502, detail="Empty response from model")

        return ChatResponse(reply=content)

    except httpx.HTTPStatusError as e:
        detail = f"Provider error: {e.response.status_code} {e.response.text}"
        raise HTTPException(status_code=502, detail=detail)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
